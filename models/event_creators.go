// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EventCreator is an object representing the database table.
type EventCreator struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Email          null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Password       null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	Followers      null.Int    `boil:"followers" json:"followers,omitempty" toml:"followers" yaml:"followers,omitempty"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	PhoneNumber    null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	ProfilePicture null.String `boil:"profile_picture" json:"profile_picture,omitempty" toml:"profile_picture" yaml:"profile_picture,omitempty"`
	Instagram      null.String `boil:"instagram" json:"instagram,omitempty" toml:"instagram" yaml:"instagram,omitempty"`
	Longitude      null.String `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`
	Latitude       null.String `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *eventCreatorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventCreatorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventCreatorColumns = struct {
	ID             string
	Name           string
	Email          string
	Password       string
	Followers      string
	Description    string
	PhoneNumber    string
	ProfilePicture string
	Instagram      string
	Longitude      string
	Latitude       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	Name:           "name",
	Email:          "email",
	Password:       "password",
	Followers:      "followers",
	Description:    "description",
	PhoneNumber:    "phone_number",
	ProfilePicture: "profile_picture",
	Instagram:      "instagram",
	Longitude:      "longitude",
	Latitude:       "latitude",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var EventCreatorTableColumns = struct {
	ID             string
	Name           string
	Email          string
	Password       string
	Followers      string
	Description    string
	PhoneNumber    string
	ProfilePicture string
	Instagram      string
	Longitude      string
	Latitude       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "event_creators.id",
	Name:           "event_creators.name",
	Email:          "event_creators.email",
	Password:       "event_creators.password",
	Followers:      "event_creators.followers",
	Description:    "event_creators.description",
	PhoneNumber:    "event_creators.phone_number",
	ProfilePicture: "event_creators.profile_picture",
	Instagram:      "event_creators.instagram",
	Longitude:      "event_creators.longitude",
	Latitude:       "event_creators.latitude",
	CreatedAt:      "event_creators.created_at",
	UpdatedAt:      "event_creators.updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EventCreatorWhere = struct {
	ID             whereHelperint
	Name           whereHelpernull_String
	Email          whereHelpernull_String
	Password       whereHelpernull_String
	Followers      whereHelpernull_Int
	Description    whereHelpernull_String
	PhoneNumber    whereHelpernull_String
	ProfilePicture whereHelpernull_String
	Instagram      whereHelpernull_String
	Longitude      whereHelpernull_String
	Latitude       whereHelpernull_String
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
}{
	ID:             whereHelperint{field: "\"event_creators\".\"id\""},
	Name:           whereHelpernull_String{field: "\"event_creators\".\"name\""},
	Email:          whereHelpernull_String{field: "\"event_creators\".\"email\""},
	Password:       whereHelpernull_String{field: "\"event_creators\".\"password\""},
	Followers:      whereHelpernull_Int{field: "\"event_creators\".\"followers\""},
	Description:    whereHelpernull_String{field: "\"event_creators\".\"description\""},
	PhoneNumber:    whereHelpernull_String{field: "\"event_creators\".\"phone_number\""},
	ProfilePicture: whereHelpernull_String{field: "\"event_creators\".\"profile_picture\""},
	Instagram:      whereHelpernull_String{field: "\"event_creators\".\"instagram\""},
	Longitude:      whereHelpernull_String{field: "\"event_creators\".\"longitude\""},
	Latitude:       whereHelpernull_String{field: "\"event_creators\".\"latitude\""},
	CreatedAt:      whereHelpernull_Time{field: "\"event_creators\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"event_creators\".\"updated_at\""},
}

// EventCreatorRels is where relationship names are stored.
var EventCreatorRels = struct {
	EventcreatorEvents string
}{
	EventcreatorEvents: "EventcreatorEvents",
}

// eventCreatorR is where relationships are stored.
type eventCreatorR struct {
	EventcreatorEvents EventSlice `boil:"EventcreatorEvents" json:"EventcreatorEvents" toml:"EventcreatorEvents" yaml:"EventcreatorEvents"`
}

// NewStruct creates a new relationship struct
func (*eventCreatorR) NewStruct() *eventCreatorR {
	return &eventCreatorR{}
}

func (r *eventCreatorR) GetEventcreatorEvents() EventSlice {
	if r == nil {
		return nil
	}
	return r.EventcreatorEvents
}

// eventCreatorL is where Load methods for each relationship are stored.
type eventCreatorL struct{}

var (
	eventCreatorAllColumns            = []string{"id", "name", "email", "password", "followers", "description", "phone_number", "profile_picture", "instagram", "longitude", "latitude", "created_at", "updated_at"}
	eventCreatorColumnsWithoutDefault = []string{}
	eventCreatorColumnsWithDefault    = []string{"id", "name", "email", "password", "followers", "description", "phone_number", "profile_picture", "instagram", "longitude", "latitude", "created_at", "updated_at"}
	eventCreatorPrimaryKeyColumns     = []string{"id"}
	eventCreatorGeneratedColumns      = []string{}
)

type (
	// EventCreatorSlice is an alias for a slice of pointers to EventCreator.
	// This should almost always be used instead of []EventCreator.
	EventCreatorSlice []*EventCreator
	// EventCreatorHook is the signature for custom EventCreator hook methods
	EventCreatorHook func(context.Context, boil.ContextExecutor, *EventCreator) error

	eventCreatorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventCreatorType                 = reflect.TypeOf(&EventCreator{})
	eventCreatorMapping              = queries.MakeStructMapping(eventCreatorType)
	eventCreatorPrimaryKeyMapping, _ = queries.BindMapping(eventCreatorType, eventCreatorMapping, eventCreatorPrimaryKeyColumns)
	eventCreatorInsertCacheMut       sync.RWMutex
	eventCreatorInsertCache          = make(map[string]insertCache)
	eventCreatorUpdateCacheMut       sync.RWMutex
	eventCreatorUpdateCache          = make(map[string]updateCache)
	eventCreatorUpsertCacheMut       sync.RWMutex
	eventCreatorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventCreatorAfterSelectHooks []EventCreatorHook

var eventCreatorBeforeInsertHooks []EventCreatorHook
var eventCreatorAfterInsertHooks []EventCreatorHook

var eventCreatorBeforeUpdateHooks []EventCreatorHook
var eventCreatorAfterUpdateHooks []EventCreatorHook

var eventCreatorBeforeDeleteHooks []EventCreatorHook
var eventCreatorAfterDeleteHooks []EventCreatorHook

var eventCreatorBeforeUpsertHooks []EventCreatorHook
var eventCreatorAfterUpsertHooks []EventCreatorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventCreator) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventCreator) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventCreator) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventCreator) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventCreator) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventCreator) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventCreator) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventCreator) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventCreator) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventCreatorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventCreatorHook registers your hook function for all future operations.
func AddEventCreatorHook(hookPoint boil.HookPoint, eventCreatorHook EventCreatorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventCreatorAfterSelectHooks = append(eventCreatorAfterSelectHooks, eventCreatorHook)
	case boil.BeforeInsertHook:
		eventCreatorBeforeInsertHooks = append(eventCreatorBeforeInsertHooks, eventCreatorHook)
	case boil.AfterInsertHook:
		eventCreatorAfterInsertHooks = append(eventCreatorAfterInsertHooks, eventCreatorHook)
	case boil.BeforeUpdateHook:
		eventCreatorBeforeUpdateHooks = append(eventCreatorBeforeUpdateHooks, eventCreatorHook)
	case boil.AfterUpdateHook:
		eventCreatorAfterUpdateHooks = append(eventCreatorAfterUpdateHooks, eventCreatorHook)
	case boil.BeforeDeleteHook:
		eventCreatorBeforeDeleteHooks = append(eventCreatorBeforeDeleteHooks, eventCreatorHook)
	case boil.AfterDeleteHook:
		eventCreatorAfterDeleteHooks = append(eventCreatorAfterDeleteHooks, eventCreatorHook)
	case boil.BeforeUpsertHook:
		eventCreatorBeforeUpsertHooks = append(eventCreatorBeforeUpsertHooks, eventCreatorHook)
	case boil.AfterUpsertHook:
		eventCreatorAfterUpsertHooks = append(eventCreatorAfterUpsertHooks, eventCreatorHook)
	}
}

// One returns a single eventCreator record from the query.
func (q eventCreatorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventCreator, error) {
	o := &EventCreator{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_creators")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventCreator records from the query.
func (q eventCreatorQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventCreatorSlice, error) {
	var o []*EventCreator

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventCreator slice")
	}

	if len(eventCreatorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventCreator records in the query.
func (q eventCreatorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_creators rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventCreatorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_creators exists")
	}

	return count > 0, nil
}

// EventcreatorEvents retrieves all the event's Events with an executor via eventcreator_id column.
func (o *EventCreator) EventcreatorEvents(mods ...qm.QueryMod) eventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"events\".\"eventcreator_id\"=?", o.ID),
	)

	return Events(queryMods...)
}

// LoadEventcreatorEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventCreatorL) LoadEventcreatorEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventCreator interface{}, mods queries.Applicator) error {
	var slice []*EventCreator
	var object *EventCreator

	if singular {
		var ok bool
		object, ok = maybeEventCreator.(*EventCreator)
		if !ok {
			object = new(EventCreator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventCreator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventCreator))
			}
		}
	} else {
		s, ok := maybeEventCreator.(*[]*EventCreator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventCreator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventCreator))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventCreatorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventCreatorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.eventcreator_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load events")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventcreatorEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventR{}
			}
			foreign.R.Eventcreator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EventcreatorID) {
				local.R.EventcreatorEvents = append(local.R.EventcreatorEvents, foreign)
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.Eventcreator = local
				break
			}
		}
	}

	return nil
}

// AddEventcreatorEvents adds the given related objects to the existing relationships
// of the event_creator, optionally inserting them as new records.
// Appends related to o.R.EventcreatorEvents.
// Sets related.R.Eventcreator appropriately.
func (o *EventCreator) AddEventcreatorEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Event) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EventcreatorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"eventcreator_id"}),
				strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EventcreatorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &eventCreatorR{
			EventcreatorEvents: related,
		}
	} else {
		o.R.EventcreatorEvents = append(o.R.EventcreatorEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventR{
				Eventcreator: o,
			}
		} else {
			rel.R.Eventcreator = o
		}
	}
	return nil
}

// SetEventcreatorEvents removes all previously related items of the
// event_creator replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Eventcreator's EventcreatorEvents accordingly.
// Replaces o.R.EventcreatorEvents with related.
// Sets related.R.Eventcreator's EventcreatorEvents accordingly.
func (o *EventCreator) SetEventcreatorEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Event) error {
	query := "update \"events\" set \"eventcreator_id\" = null where \"eventcreator_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EventcreatorEvents {
			queries.SetScanner(&rel.EventcreatorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Eventcreator = nil
		}
		o.R.EventcreatorEvents = nil
	}

	return o.AddEventcreatorEvents(ctx, exec, insert, related...)
}

// RemoveEventcreatorEvents relationships from objects passed in.
// Removes related items from R.EventcreatorEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Eventcreator.
func (o *EventCreator) RemoveEventcreatorEvents(ctx context.Context, exec boil.ContextExecutor, related ...*Event) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EventcreatorID, nil)
		if rel.R != nil {
			rel.R.Eventcreator = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("eventcreator_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EventcreatorEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.EventcreatorEvents)
			if ln > 1 && i < ln-1 {
				o.R.EventcreatorEvents[i] = o.R.EventcreatorEvents[ln-1]
			}
			o.R.EventcreatorEvents = o.R.EventcreatorEvents[:ln-1]
			break
		}
	}

	return nil
}

// EventCreators retrieves all the records using an executor.
func EventCreators(mods ...qm.QueryMod) eventCreatorQuery {
	mods = append(mods, qm.From("\"event_creators\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"event_creators\".*"})
	}

	return eventCreatorQuery{q}
}

// FindEventCreator retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventCreator(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EventCreator, error) {
	eventCreatorObj := &EventCreator{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_creators\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, eventCreatorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_creators")
	}

	if err = eventCreatorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventCreatorObj, err
	}

	return eventCreatorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventCreator) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_creators provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventCreatorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventCreatorInsertCacheMut.RLock()
	cache, cached := eventCreatorInsertCache[key]
	eventCreatorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventCreatorAllColumns,
			eventCreatorColumnsWithDefault,
			eventCreatorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventCreatorType, eventCreatorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventCreatorType, eventCreatorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_creators\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_creators\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_creators")
	}

	if !cached {
		eventCreatorInsertCacheMut.Lock()
		eventCreatorInsertCache[key] = cache
		eventCreatorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EventCreator.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventCreator) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventCreatorUpdateCacheMut.RLock()
	cache, cached := eventCreatorUpdateCache[key]
	eventCreatorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventCreatorAllColumns,
			eventCreatorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_creators, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_creators\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventCreatorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventCreatorType, eventCreatorMapping, append(wl, eventCreatorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_creators row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_creators")
	}

	if !cached {
		eventCreatorUpdateCacheMut.Lock()
		eventCreatorUpdateCache[key] = cache
		eventCreatorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventCreatorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_creators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_creators")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventCreatorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventCreatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_creators\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventCreatorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventCreator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventCreator")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventCreator) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_creators provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventCreatorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventCreatorUpsertCacheMut.RLock()
	cache, cached := eventCreatorUpsertCache[key]
	eventCreatorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			eventCreatorAllColumns,
			eventCreatorColumnsWithDefault,
			eventCreatorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			eventCreatorAllColumns,
			eventCreatorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert event_creators, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(eventCreatorPrimaryKeyColumns))
			copy(conflict, eventCreatorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"event_creators\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(eventCreatorType, eventCreatorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventCreatorType, eventCreatorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert event_creators")
	}

	if !cached {
		eventCreatorUpsertCacheMut.Lock()
		eventCreatorUpsertCache[key] = cache
		eventCreatorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EventCreator record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventCreator) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventCreator provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventCreatorPrimaryKeyMapping)
	sql := "DELETE FROM \"event_creators\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_creators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_creators")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventCreatorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventCreatorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_creators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_creators")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventCreatorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventCreatorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventCreatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_creators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventCreatorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventCreator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_creators")
	}

	if len(eventCreatorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventCreator) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventCreator(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventCreatorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventCreatorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventCreatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_creators\".* FROM \"event_creators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventCreatorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventCreatorSlice")
	}

	*o = slice

	return nil
}

// EventCreatorExists checks if the EventCreator row exists.
func EventCreatorExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_creators\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_creators exists")
	}

	return exists, nil
}

// Exists checks if the EventCreator row exists.
func (o *EventCreator) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventCreatorExists(ctx, exec, o.ID)
}
